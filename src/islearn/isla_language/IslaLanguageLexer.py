# Generated from IslaLanguage.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,289,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,5,26,226,8,26,10,26,12,26,
        229,9,26,1,26,1,26,1,27,1,27,1,27,5,27,236,8,27,10,27,12,27,239,
        9,27,1,28,4,28,242,8,28,11,28,12,28,243,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,37,1,37,1,38,4,38,268,8,38,11,38,12,38,269,1,38,1,38,1,39,
        1,39,5,39,276,8,39,10,39,12,39,279,9,39,1,39,1,39,1,39,1,39,1,40,
        3,40,286,8,40,1,41,1,41,2,227,277,0,42,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,0,83,0,1,0,3,6,0,34,34,92,92,98,98,110,110,114,114,116,116,
        3,0,9,10,13,13,32,32,4,0,45,46,65,90,95,95,97,122,293,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,85,1,0,0,0,3,
        91,1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,0,9,102,1,0,0,0,11,105,1,0,0,
        0,13,112,1,0,0,0,15,114,1,0,0,0,17,118,1,0,0,0,19,122,1,0,0,0,21,
        126,1,0,0,0,23,129,1,0,0,0,25,133,1,0,0,0,27,141,1,0,0,0,29,145,
        1,0,0,0,31,147,1,0,0,0,33,149,1,0,0,0,35,151,1,0,0,0,37,166,1,0,
        0,0,39,171,1,0,0,0,41,177,1,0,0,0,43,187,1,0,0,0,45,199,1,0,0,0,
        47,204,1,0,0,0,49,210,1,0,0,0,51,215,1,0,0,0,53,222,1,0,0,0,55,232,
        1,0,0,0,57,241,1,0,0,0,59,245,1,0,0,0,61,248,1,0,0,0,63,250,1,0,
        0,0,65,252,1,0,0,0,67,254,1,0,0,0,69,256,1,0,0,0,71,259,1,0,0,0,
        73,262,1,0,0,0,75,264,1,0,0,0,77,267,1,0,0,0,79,273,1,0,0,0,81,285,
        1,0,0,0,83,287,1,0,0,0,85,86,5,99,0,0,86,87,5,111,0,0,87,88,5,110,
        0,0,88,89,5,115,0,0,89,90,5,116,0,0,90,2,1,0,0,0,91,92,5,58,0,0,
        92,4,1,0,0,0,93,94,5,59,0,0,94,6,1,0,0,0,95,96,5,102,0,0,96,97,5,
        111,0,0,97,98,5,114,0,0,98,99,5,97,0,0,99,100,5,108,0,0,100,101,
        5,108,0,0,101,8,1,0,0,0,102,103,5,105,0,0,103,104,5,110,0,0,104,
        10,1,0,0,0,105,106,5,101,0,0,106,107,5,120,0,0,107,108,5,105,0,0,
        108,109,5,115,0,0,109,110,5,116,0,0,110,111,5,115,0,0,111,12,1,0,
        0,0,112,113,5,61,0,0,113,14,1,0,0,0,114,115,5,105,0,0,115,116,5,
        110,0,0,116,117,5,116,0,0,117,16,1,0,0,0,118,119,5,110,0,0,119,120,
        5,111,0,0,120,121,5,116,0,0,121,18,1,0,0,0,122,123,5,97,0,0,123,
        124,5,110,0,0,124,125,5,100,0,0,125,20,1,0,0,0,126,127,5,111,0,0,
        127,128,5,114,0,0,128,22,1,0,0,0,129,130,5,120,0,0,130,131,5,111,
        0,0,131,132,5,114,0,0,132,24,1,0,0,0,133,134,5,105,0,0,134,135,5,
        109,0,0,135,136,5,112,0,0,136,137,5,108,0,0,137,138,5,105,0,0,138,
        139,5,101,0,0,139,140,5,115,0,0,140,26,1,0,0,0,141,142,5,105,0,0,
        142,143,5,102,0,0,143,144,5,102,0,0,144,28,1,0,0,0,145,146,5,40,
        0,0,146,30,1,0,0,0,147,148,5,44,0,0,148,32,1,0,0,0,149,150,5,41,
        0,0,150,34,1,0,0,0,151,152,5,60,0,0,152,153,5,63,0,0,153,154,5,78,
        0,0,154,155,5,79,0,0,155,156,5,78,0,0,156,157,5,84,0,0,157,158,5,
        69,0,0,158,159,5,82,0,0,159,160,5,77,0,0,160,161,5,73,0,0,161,162,
        5,78,0,0,162,163,5,65,0,0,163,164,5,76,0,0,164,165,5,62,0,0,165,
        36,1,0,0,0,166,167,5,116,0,0,167,168,5,114,0,0,168,169,5,117,0,0,
        169,170,5,101,0,0,170,38,1,0,0,0,171,172,5,102,0,0,172,173,5,97,
        0,0,173,174,5,108,0,0,174,175,5,115,0,0,175,176,5,101,0,0,176,40,
        1,0,0,0,177,178,5,60,0,0,178,179,5,63,0,0,179,180,5,83,0,0,180,181,
        5,84,0,0,181,182,5,82,0,0,182,183,5,73,0,0,183,184,5,78,0,0,184,
        185,5,71,0,0,185,186,5,62,0,0,186,42,1,0,0,0,187,188,5,60,0,0,188,
        189,5,63,0,0,189,190,5,68,0,0,190,191,5,83,0,0,191,192,5,84,0,0,
        192,193,5,82,0,0,193,194,5,73,0,0,194,195,5,78,0,0,195,196,5,71,
        0,0,196,197,5,83,0,0,197,198,5,62,0,0,198,44,1,0,0,0,199,200,5,114,
        0,0,200,201,5,101,0,0,201,202,5,46,0,0,202,203,5,42,0,0,203,46,1,
        0,0,0,204,205,5,114,0,0,205,206,5,101,0,0,206,207,5,46,0,0,207,208,
        5,43,0,0,208,209,5,43,0,0,209,48,1,0,0,0,210,211,5,114,0,0,211,212,
        5,101,0,0,212,213,5,46,0,0,213,214,5,43,0,0,214,50,1,0,0,0,215,216,
        5,115,0,0,216,217,5,116,0,0,217,218,5,114,0,0,218,219,5,46,0,0,219,
        220,5,43,0,0,220,221,5,43,0,0,221,52,1,0,0,0,222,227,5,34,0,0,223,
        226,3,59,29,0,224,226,9,0,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,
        229,1,0,0,0,227,228,1,0,0,0,227,225,1,0,0,0,228,230,1,0,0,0,229,
        227,1,0,0,0,230,231,5,34,0,0,231,54,1,0,0,0,232,237,3,81,40,0,233,
        236,3,81,40,0,234,236,3,83,41,0,235,233,1,0,0,0,235,234,1,0,0,0,
        236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,56,1,0,0,0,239,
        237,1,0,0,0,240,242,3,83,41,0,241,240,1,0,0,0,242,243,1,0,0,0,243,
        241,1,0,0,0,243,244,1,0,0,0,244,58,1,0,0,0,245,246,5,92,0,0,246,
        247,7,0,0,0,247,60,1,0,0,0,248,249,5,47,0,0,249,62,1,0,0,0,250,251,
        5,42,0,0,251,64,1,0,0,0,252,253,5,43,0,0,253,66,1,0,0,0,254,255,
        5,45,0,0,255,68,1,0,0,0,256,257,5,62,0,0,257,258,5,61,0,0,258,70,
        1,0,0,0,259,260,5,60,0,0,260,261,5,61,0,0,261,72,1,0,0,0,262,263,
        5,62,0,0,263,74,1,0,0,0,264,265,5,60,0,0,265,76,1,0,0,0,266,268,
        7,1,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,
        1,0,0,0,270,271,1,0,0,0,271,272,6,38,0,0,272,78,1,0,0,0,273,277,
        5,35,0,0,274,276,9,0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,278,
        1,0,0,0,277,275,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,
        5,10,0,0,281,282,1,0,0,0,282,283,6,39,0,0,283,80,1,0,0,0,284,286,
        7,2,0,0,285,284,1,0,0,0,286,82,1,0,0,0,287,288,2,48,57,0,288,84,
        1,0,0,0,9,0,225,227,235,237,243,269,277,285,1,6,0,0
    ]

class IslaLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    STRING = 27
    ID = 28
    INT = 29
    ESC = 30
    DIV = 31
    MUL = 32
    PLUS = 33
    MINUS = 34
    GEQ = 35
    LEQ = 36
    GT = 37
    LT = 38
    WS = 39
    LINE_COMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'const'", "':'", "';'", "'forall'", "'in'", "'exists'", "'='", 
            "'int'", "'not'", "'and'", "'or'", "'xor'", "'implies'", "'iff'", 
            "'('", "','", "')'", "'<?NONTERMINAL>'", "'true'", "'false'", 
            "'<?STRING>'", "'<?DSTRINGS>'", "'re.*'", "'re.++'", "'re.+'", 
            "'str.++'", "'/'", "'*'", "'+'", "'-'", "'>='", "'<='", "'>'", 
            "'<'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "ID", "INT", "ESC", "DIV", "MUL", "PLUS", "MINUS", 
            "GEQ", "LEQ", "GT", "LT", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "STRING", "ID", "INT", "ESC", "DIV", "MUL", "PLUS", "MINUS", 
                  "GEQ", "LEQ", "GT", "LT", "WS", "LINE_COMMENT", "ID_LETTER", 
                  "DIGIT" ]

    grammarFileName = "IslaLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


