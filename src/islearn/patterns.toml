[[Def-Use]]

name = "Def-Use (C)"
constraint = '''
forall <?NONTERMINAL> use_ctx in start:
  forall <?NONTERMINAL> use in use_ctx:
    exists <?NONTERMINAL> def_ctx="{<?MATCHEXPR(def)>}" in start:
      (before(def_ctx, use_ctx) and
      (= use def))
'''

[[Def-Use]]

name = "Def-Use (reST)"
constraint = '''
forall <?NONTERMINAL> use_ctx="{<?MATCHEXPR(use)>}" in start:
  exists <?NONTERMINAL> def_ctx="{<?MATCHEXPR(def)>}" in start:
    (different_position(use_ctx, def_ctx) and
    (= use def))
'''

[[Def-Use]]

name = "Def-Use (XML)"
constraint = '''
forall <?NONTERMINAL> attribute in start:
  forall <?NONTERMINAL> prefix_id="{<?MATCHEXPR(prefix_use)>}" in attribute:
    ((= prefix_use <?STRING>) or
      exists <?NONTERMINAL> outer_tag="{<?MATCHEXPR(cont_attribute, contained_tree)>}" in start:
        (inside(attribute, contained_tree) and
         exists <?NONTERMINAL> def_attribute="{<?MATCHEXPR(prefix_def)>}" in cont_attribute:
           (= prefix_use prefix_def)))
'''

[[Types]]

name = "Value Type is Date (TOML)"
constraint = '''
forall <?NONTERMINAL> container="{<?MATCHEXPR(key, value)>}" in start:
  ((= key <?STRING>) implies
   (str.in_re value (re.++ ((_ re.loop 4 4) (re.range "0" "9"))
                           (str.to_re "-")
                           ((_ re.loop 2 2) (re.range "0" "9"))
                           (str.to_re "-")
                           ((_ re.loop 2 2) (re.range "0" "9")))))
'''

[[Types]]

name = "Value Type is Integer (TOML)"
constraint = '''
forall <?NONTERMINAL> container="{<?MATCHEXPR(key, value)>}" in start:
  ((= key <?STRING>) implies
   (str.in_re value (re.++ (re.opt (str.to_re "-")) (re.+ (re.range "0" "9")))))
'''

[[Types]]

name = "Value Type is String (TOML)"
# '"' [^\n"]* '"'
constraint = '''
forall <?NONTERMINAL> container="{<?MATCHEXPR(key, value)>}" in start:
  ((= key <?STRING>) implies
   (str.in_re value (re.++ (str.to_re """")
                           (re.* (re.comp (re.union (str.to_re "\n") (str.to_re """"))))
                           (str.to_re """"))))
'''

[[Types]]

name = "Value Type is Float (TOML)"
# [+-]? ( [0-9]+ ([.][0-9]*)? | [.][0-9]+)$
constraint = '''
forall <?NONTERMINAL> container="{<?MATCHEXPR(key, value)>}" in start:
  ((= key <?STRING>) implies
   (str.in_re value
     (re.++
       (re.opt (re.union (str.to_re "+") (str.to_re "-")))
       (re.union
         (re.++
           (re.+ (re.range "0" "9"))
           (re.++ (str.to_re ".") (re.* (re.range "0" "9"))))
         (re.++
           (str.to_re ".")
           (re.+ (re.range "0" "9")))))))
'''

[[Types]]

name = "Value Type is Integer (CSV)"
constraint = '''
forall <?NONTERMINAL> container in start:
  forall <?NONTERMINAL> row in container:
    exists <?NONTERMINAL> column in row:
      (nth(<?STRING>, column, row) and
        (str.in_re column (re.++ (re.opt (str.to_re "-")) (re.+ (re.range "0" "9")))))
'''

[[Types]]

name = "Value Type is String (CSV)"
constraint = '''
forall <?NONTERMINAL> container in start:
  forall <?NONTERMINAL> row in container:
    exists <?NONTERMINAL> column in row:
      (nth(<?STRING>, column, row) and
        (str.in_re column (re.++ (str.to_re """")
                          (re.* (re.comp (re.union (str.to_re "\n") (str.to_re """"))))
                          (str.to_re """"))))
'''

[[Types]]

name = "Value Type is Float (CSV)"
constraint = '''
forall <?NONTERMINAL> container in start:
  forall <?NONTERMINAL> row in container:
    exists <?NONTERMINAL> column in row:
      (nth(<?STRING>, column, row) and
        (str.in_re column
          (re.++
            (re.opt (re.union (str.to_re "+") (str.to_re "-")))
            (re.union
              (re.++
                (re.+ (re.range "0" "9"))
                (re.++ (str.to_re ".") (re.* (re.range "0" "9"))))
              (re.++
                (str.to_re ".")
                (re.+ (re.range "0" "9")))))))
'''

[[Types]]

name = "Value Type is Date (CSV)"
constraint = '''
forall <?NONTERMINAL> container in start:
  forall <?NONTERMINAL> row in container:
    exists <?NONTERMINAL> column in row:
      (nth(<?STRING>, column, row) and
        (str.in_re column (re.++ ((_ re.loop 4 4) (re.range "0" "9"))
                          (str.to_re "-")
                          ((_ re.loop 2 2) (re.range "0" "9"))
                          (str.to_re "-")
                          ((_ re.loop 2 2) (re.range "0" "9")))))
'''

[[Universal]]

name = "String Length Upper Bound"
constraint = '''
forall <?NONTERMINAL> elem in start:
  (<= (str.len elem) (str.to.int <?STRING>))
'''

[[Universal]]

name = "String Length Lower Bound"
constraint = '''
forall <?NONTERMINAL> elem in start:
  (>= (str.len elem) (str.to.int <?STRING>))
'''

[[Existential]]

name = "String Existence"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> elem in container:
    (= elem <?STRING>)
'''

[[Existential]]

name = "Existence String Fixed Length"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> elem in container:
    (= (str.len elem) (str.to.int <?STRING>))
'''

[[Existential]]

name = "Existence String Max Length"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> elem in container:
    (<= (str.len elem) (str.to.int <?STRING>))
'''

[[Existential]]

name = "Existence Numeric String Smaller Than"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> elem in container:
    (<= (str.to.int elem) (str.to.int <?STRING>))
'''

[[Existential]]

name = "Existence Numeric String Larger Than"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> elem in container:
    (>= (str.to.int elem) (str.to.int <?STRING>))
'''

[[Existential]]

# NOTE: This pattern is quite expensive to instantiate.
name = "Existence Strings Relative Order"
constraint = '''
forall <?NONTERMINAL> container in start:
  exists <?NONTERMINAL> occ_1 in container:
    exists <?NONTERMINAL> occ_2 in container:
      (before(occ_1, occ_2) and
       (= occ_2 <?STRING>) and
       (= occ_1 <?STRING>))
'''

[[Misc]]

name = "Balance"
constraint = '''
forall <?NONTERMINAL> container="{<?MATCHEXPR(opid, clid)>}" in start:
  (= opid clid)
'''

[[Misc]]

name = "Equal Count"
constraint = '''
exists int num:
  forall <?NONTERMINAL> elem in start:
    ((>= (str.to.int num) 1) and
    count(elem, <?NONTERMINAL>, num))
'''
